import logging
import string

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CopyTextButton, ReplyKeyboardMarkup, \
    KeyboardButton
from telegram.ext import ContextTypes

from app.db.repository import Account, Repository, InMemoryRepository, User
from app.security.password_generator import generate
from app.security.security_utils import encrypt, decrypt, get_hash

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
services_per_page = 5
repository: Repository = InMemoryRepository()
_MAIN_MENU_MARKUP = ReplyKeyboardMarkup.from_row([
    KeyboardButton("üìã —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"),
    KeyboardButton("üì• –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
    KeyboardButton("‚öô –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
    KeyboardButton("üëã –í—ã–π—Ç–∏")
], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. {update.effective_user.id}')
    context.user_data["secret"] = "pass"
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. {update.effective_user.id}',
        reply_markup=_MAIN_MENU_MARKUP)

async def add_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_markup = ReplyKeyboardMarkup.from_row([
        KeyboardButton("üè† –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    ], resize_keyboard=True, one_time_keyboard=True)

    if (context.args is None) or (len(context.args) < 2):
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <—Å–µ—Ä–≤–∏—Å> <login> <–ø–∞—Ä–æ–ª—å>', reply_markup=reply_markup)
        return

    user_id = update.effective_user.id
    service = context.args[0]
    login = context.args[1]
    password = context.args[2]

    password, password_salt = encrypt(password.encode(), context.user_data["secret"].encode())

    await repository.save_account(Account(user_id, service, login, password, password_salt))
    await update.message.reply_text(f'–ü–∞—Ä–æ–ª—å –¥–ª—è {service} –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=_MAIN_MENU_MARKUP)

async def list_passwords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    services = await repository.get_accounts(update.effective_user.id)
    if not services:
        await update.message.reply_text('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.')
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page = int(context.args[0]) if context.args and context.args[0].isdigit() else 0
    start = page * services_per_page
    end = start + services_per_page
    keyboard = []

    for service in services[start:end]:
        keyboard.append([InlineKeyboardButton(service, callback_data=service)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if start > 0:
        keyboard.append([InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'page_{page - 1}')])
    if end < len(services):
        keyboard.append([InlineKeyboardButton('–í–ø–µ—Ä–µ–¥', callback_data=f'page_{page + 1}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data.startswith('page_'):
        page = int(query.data.split('_')[1])
        await list_passwords(query, context)

    else:
        service = query.data
        await send_password(query, service, context)


async def generate_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    alphabet = string.ascii_letters + string.digits + string.punctuation

    password = generate(16, alphabet)

    copy_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å password', copy_text=CopyTextButton(password))]])
    await update.message.reply_text('–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=copy_kb)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = {
        "üìã —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤": list_passwords,
        "üì• –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç": add_password,
        "‚Ü™ –Ω–∞–∑–∞–¥": None,
        "üè† –Ω–∞ –≥–ª–∞–≤–Ω—É—é": start,
        "‚öô –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å": generate_password,
        "üëã –í—ã–π—Ç–∏": logout
    }

    command = commands.get(update.message.text)
    if command:
        await command(update, context)
    else:
        await context.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def send_password(update: Update, service: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    account = await repository.get_account(update.from_user.id, service)
    login = account.get_login()
    password = decrypt(account.get_password(), context.user_data["secret"].encode(), account.get_password_salt())
    copy_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å login', copy_text=CopyTextButton(login))],
                                    [InlineKeyboardButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å password',
                                                          copy_text=CopyTextButton(password.decode()))]])
    await update.message.reply_text(f'–í–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {service}.', reply_markup=copy_kb)