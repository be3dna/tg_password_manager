import logging
import string

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CopyTextButton, ReplyKeyboardMarkup, \
    KeyboardButton
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters

from app.config import SERVICES_PER_PAGE
from app.db.password import PasswordDB

from app.db.repository import Account, Repository, InMemoryRepository, User
from app.security.password_generator import generate
from app.security.security_utils import encrypt, decrypt, get_hash

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
passwords = {'github': '1234', 'b': '1234', 'c': '1234', 'd': '1234', 'e': '1234', 'f': '1234'}
SERVICE_STATE, PASSWORD_STATE, CHOOSE_STATE = range(3)

repository: Repository = InMemoryRepository()
_MAIN_MENU_MARKUP = ReplyKeyboardMarkup.from_row([
    KeyboardButton("üìã —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"),
    KeyboardButton("üì• –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
    KeyboardButton("‚öô –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
    KeyboardButton("üëã –í—ã–π—Ç–∏")
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. {update.effective_user.id}')
    context.user_data["secret"] = "pass"
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. {update.effective_user.id}',
        reply_markup=_MAIN_MENU_MARKUP)


async def new_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_markup = ReplyKeyboardMarkup.from_row([
        KeyboardButton("üè† –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    ], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(f'–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞', reply_markup=reply_markup)
    return SERVICE_STATE

async def add_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    service_name = update.message.text
    context.user_data['service'] = service_name
    await update.message.reply_text(f'–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}')
    return PASSWORD_STATE

async def add_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    #todo
    pass

async def add_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    service = context.user_data['service']
    password = update.message.text #todo encrypt
    user_id = update.effective_user.id
    await PasswordDB.add_password(service=service, password=password, user_id=user_id)
    await update.message.reply_text(f'–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    return ConversationHandler.END

async def list_services(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    page = context.user_data.get('page')
    user_id = update.effective_user.id

    if page is None:
        context.user_data['page'] = 0
        services = await PasswordDB.get_user_services(user_id=user_id)
        context.user_data['services'] = services[::]
    else:
        services = context.user_data['services']
        if update.callback_query.data == 'next_page':
            context.user_data['page'] += 1
        else:
            context.user_data['page'] -= 1

    page = context.user_data['page']

    if not services:
        await update.message.reply_text('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.')
        return ConversationHandler.END

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * SERVICES_PER_PAGE
    end = start + SERVICES_PER_PAGE
    keyboard = []

    for service in services[start:end]:
        keyboard.append([InlineKeyboardButton(service, callback_data=f'service_{service}')])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if start > 0:
        keyboard.append([InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='previous_page')])
    if end < len(services):
        keyboard.append([InlineKeyboardButton('–í–ø–µ—Ä–µ–¥', callback_data='next_page')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message is not None:
        message = update.message
    else:
        await update.callback_query.answer()
        message = update.callback_query.message
    await message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=reply_markup)

    return CHOOSE_STATE


async def generate_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    alphabet = string.ascii_letters + string.digits + string.punctuation

    password = generate(16, alphabet)

    copy_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å password', copy_text=CopyTextButton(password))]])
    await update.message.reply_text('–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=copy_kb)


async def send_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    service = update.callback_query.data.split('_', 1)[1]
    password = await PasswordDB.get_password(user_id=user_id, service=service)
    copy_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', copy_text=CopyTextButton(password))]])
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(f'–í–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {service}.', reply_markup=copy_kb)
    return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = {
        "üìã —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤": list_passwords,
        "üì• –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç": add_password,
        "‚Ü™ –Ω–∞–∑–∞–¥": None,
        "üè† –Ω–∞ –≥–ª–∞–≤–Ω—É—é": start,
        "‚öô –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å": generate_password,
        "üëã –í—ã–π—Ç–∏": None
    }

    command = commands.get(update.message.text)
    if command:
        await command(update, context)
    else:
        await context.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")



new_password_handler = ConversationHandler(
    entry_points=[CommandHandler('add', new_password)],
    states={
        SERVICE_STATE: [MessageHandler(filters.TEXT, add_service)],
        PASSWORD_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_password)]
    },
    fallbacks=[]
)

get_password_handler = ConversationHandler(
    entry_points=[CommandHandler('list', list_services)],
    states={
        CHOOSE_STATE: [
            CallbackQueryHandler(pattern='^previous_page$|^next_page$',callback=list_services),
            CallbackQueryHandler(pattern='^service_.+$', callback=send_password)
        ],
    },
    fallbacks=[]
)