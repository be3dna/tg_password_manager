"""initial

Revision ID: 754ffa46916f
Revises: 
Create Date: 2025-07-09 12:58:09.070915

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '754ffa46916f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
                    sa.Column('password_hash', postgresql.BYTEA(), autoincrement=False, nullable=True),
                    sa.Column('password_hash_salt', postgresql.BYTEA(), autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
                    sa.UniqueConstraint('user_id', name=op.f('user_user_id_key'))
                    )
    op.create_table('account',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
                    sa.Column('service', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
                    sa.Column('login', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
                    sa.Column('password', postgresql.BYTEA(), autoincrement=False, nullable=True),
                    sa.Column('password_salt', postgresql.BYTEA(), autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('account_pkey'))
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('account', if_exists=True)
    op.drop_table('user', if_exists=True)
    # ### end Alembic commands ###
